Description: replace ava by tape
Author: Xavier Guimard <yadd@debian.org>
Forwarded: not-needed
Last-Update: 2020-12-09

--- a/test.js
+++ b/test.js
@@ -1,10 +1,10 @@
 /* eslint-disable promise/prefer-await-to-then */
-import util from 'util';
-import fs from 'fs';
-import stream from 'stream';
-import test from 'ava';
-import pinkiePromise from 'pinkie-promise';
-import pify from '.';
+const util = require('util');
+const fs = require('fs');
+const stream = require('stream');
+const test = require('tape');
+const pinkiePromise = require('pinkie-promise');
+const pify = require('.');
 
 const fixture = callback => setImmediate(() => {
 	callback(null, 'unicorn');
@@ -69,53 +69,61 @@
 test('main', async t => {
 	t.is(typeof pify(fixture)().then, 'function');
 	t.is(await pify(fixture)(), 'unicorn');
+	t.end();
 });
 
 test('throw error on invalid input', t => {
-	let error = t.throws(() => pify());
-	t.is(error.message, 'Expected `input` to be a `Function` or `Object`, got `undefined`');
+	let error = t.throws(() => pify(), 'Expected `input` to be a `Function` or `Object`, got `undefined`');
 
-	error = t.throws(() => pify(''));
-	t.is(error.message, 'Expected `input` to be a `Function` or `Object`, got `string`');
+	error = t.throws(() => pify(''), 'Expected `input` to be a `Function` or `Object`, got `string`');
 
-	error = t.throws(() => pify(null));
-	t.is(error.message, 'Expected `input` to be a `Function` or `Object`, got `null`');
+	error = t.throws(() => pify(null), 'Expected `input` to be a `Function` or `Object`, got `null`');
+	t.end();
 });
 
 test('error', async t => {
 	t.is(await pify(fixture1)().catch(error => error), 'error');
+	t.end();
 });
 
 test('pass argument', async t => {
 	t.is(await pify(fixture2)('rainbow'), 'rainbow');
+	t.end();
 });
 
 test('custom Promise module', async t => {
 	t.is(await pify(fixture, {promiseModule: pinkiePromise})(), 'unicorn');
+	t.end();
 });
 
 test('multiArgs option', async t => {
 	t.deepEqual(await pify(fixture3, {multiArgs: true})(), ['unicorn', 'rainbow']);
+	t.end();
 });
 
 test('multiArgs option â€” rejection', async t => {
 	t.deepEqual(await pify(fixture1, {multiArgs: true})().catch(error => error), ['error', 'unicorn', 'rainbow']);
+	t.end();
 });
 
 test('wrap core method', async t => {
 	t.is(JSON.parse(await pify(fs.readFile)('package.json')).name, 'pify');
+	t.end();
 });
 
 test('module support', async t => {
 	t.is(JSON.parse(await pify(fs).readFile('package.json')).name, 'pify');
+	t.end();
 });
 
 test('module support - doesn\'t transform *Sync methods by default', t => {
 	t.is(JSON.parse(pify(fs).readFileSync('package.json')).name, 'pify');
+	t.end();
 });
 
 test('module support - doesn\'t transform *Stream methods by default', t => {
 	t.true(pify(fs).createReadStream('package.json') instanceof stream.Readable);
+	t.end();
 });
 
 test('module support - preserves non-function members', t => {
@@ -125,6 +133,7 @@
 	};
 
 	t.deepEqual(Object.keys(module), Object.keys(pify(module)));
+	t.end();
 });
 
 test('module support - transforms only members in options.include', t => {
@@ -135,6 +144,7 @@
 	t.is(typeof pModule.method1().then, 'function');
 	t.is(typeof pModule.method2().then, 'function');
 	t.not(typeof pModule.method3().then, 'function');
+	t.end();
 });
 
 test('module support - doesn\'t transform members in options.exclude', t => {
@@ -145,6 +155,7 @@
 	t.is(typeof pModule.method1().then, 'function');
 	t.is(typeof pModule.method2().then, 'function');
 	t.not(typeof pModule.method3().then, 'function');
+	t.end();
 });
 
 test('module support - options.include over options.exclude', t => {
@@ -156,6 +167,7 @@
 	t.is(typeof pModule.method1().then, 'function');
 	t.is(typeof pModule.method2().then, 'function');
 	t.not(typeof pModule.method3().then, 'function');
+	t.end();
 });
 
 test('module support â€” function modules', t => {
@@ -163,6 +175,7 @@
 
 	t.is(typeof pModule().then, 'function');
 	t.is(typeof pModule.meow().then, 'function');
+	t.end();
 });
 
 test('module support â€” function modules exclusion', t => {
@@ -172,6 +185,7 @@
 
 	t.is(typeof pModule.meow().then, 'function');
 	t.not(typeof pModule(() => {}).then, 'function');
+	t.end();
 });
 
 test('`errorFirst` option', async t => {
@@ -180,6 +194,7 @@
 	};
 
 	t.is(await pify(fixture, {errorFirst: false})('ðŸ¦„'), 'ðŸ¦„');
+	t.end();
 });
 
 test('`errorFirst` option and `multiArgs`', async t => {
@@ -191,6 +206,7 @@
 		errorFirst: false,
 		multiArgs: true
 	})('ðŸ¦„', 'ðŸŒˆ'), ['ðŸ¦„', 'ðŸŒˆ']);
+	t.end();
 });
 
 test('class support - does not create a copy', async t => {
@@ -208,6 +224,7 @@
 
 	t.is(await pified.y(), 'bar');
 	t.is(pified.x, 'bar');
+	t.end();
 });
 
 test('class support â€” transforms inherited methods', t => {
@@ -219,6 +236,7 @@
 	t.is(typeof pInstance.method1().then, 'function');
 	t.is(typeof pInstance.parentMethod1().then, 'function');
 	t.is(typeof pInstance.grandparentMethod1().then, 'function');
+	t.end();
 });
 
 test('class support â€” preserves prototype', t => {
@@ -226,6 +244,7 @@
 	const pInstance = pify(instance);
 
 	t.true(pInstance instanceof FixtureClass);
+	t.end();
 });
 
 test('class support â€” respects inheritance order', async t => {
@@ -234,6 +253,7 @@
 
 	t.is(instance.overriddenValue1, pInstance.overriddenValue1);
 	t.is(await pInstance.overriddenMethod1('rainbow'), 'rainbow');
+	t.end();
 });
 
 test('class support - transforms only members in options.include, copies all', t => {
@@ -245,6 +265,7 @@
 	t.is(typeof pInstance.parentMethod1().then, 'function');
 	t.not(typeof pInstance.method1(() => {}).then, 'function');
 	t.not(typeof pInstance.grandparentMethod1(() => {}).then, 'function');
+	t.end();
 });
 
 test('class support - doesn\'t transform members in options.exclude', t => {
@@ -255,6 +276,7 @@
 
 	t.not(typeof pInstance.grandparentMethod1(() => {}).then, 'function');
 	t.is(typeof pInstance.parentMethod1().then, 'function');
+	t.end();
 });
 
 test('class support - options.include over options.exclude', t => {
@@ -267,11 +289,13 @@
 	t.is(typeof pInstance.method1().then, 'function');
 	t.is(typeof pInstance.parentMethod1().then, 'function');
 	t.not(typeof pInstance.grandparentMethod1(() => {}).then, 'function');
+	t.end();
 });
 
 test('promisify prototype function', async t => {
 	const instance = new FixtureClass();
 	t.is(await instance.method2Async(), 72);
+	t.end();
 });
 
 test('method mutation', async t => {
@@ -289,21 +313,7 @@
 	});
 
 	t.is(await pified.foo(), 'new');
-});
-
-test('symbol keys', async t => {
-	await t.notThrowsAsync(async () => {
-		const symbol = Symbol('symbol');
-
-		const object = {
-			[symbol]: callback => {
-				setImmediate(callback);
-			}
-		};
-
-		const pified = pify(object);
-		await pified[symbol]();
-	});
+	t.end();
 });
 
 // [[Get]] for proxy objects enforces the following invariants: The value
@@ -321,9 +331,10 @@
 	});
 
 	const pified = pify(object);
-	t.notThrows(() => {
+	t.doesNotThrow(() => {
 		Reflect.get(pified, 'prop');
 	});
+	t.end();
 });
 
 test('do not promisify Function.prototype.bind', async t => {
@@ -333,6 +344,7 @@
 
 	const target = {};
 	t.is(await pify(fn).bind(target)(), target);
+	t.end();
 });
 
 test('do not break internal callback usage', async t => {
@@ -346,6 +358,7 @@
 		}
 	};
 	t.is(await pify(object).foo(), 42);
+	t.end();
 });
 
 test('Function.prototype.call', async t => {
@@ -356,6 +369,7 @@
 
 	const pified = pify(fn);
 	t.is(await pified.call(), 0);
+	t.end();
 });
 
 test('Function.prototype.apply', async t => {
@@ -366,6 +380,7 @@
 
 	const pified = pify(fn);
 	t.is(await pified.apply(), 0);
+	t.end();
 });
 
 test('self as member', async t => {
@@ -377,4 +392,5 @@
 	fn.self = fn;
 	const pified = pify(fn);
 	t.is(await pified.self(), 0);
+	t.end();
 });
